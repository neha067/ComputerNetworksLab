Question 1 : A simple Program to print the IP address of the system 

class IP_Address
{
    public static void main(String args[]) throws Exception
    {
        InetAddress IP = InetAddress.getLocalHost();
        System.out.println("IP of my system is := "+IP.getHostAddress());
    }
}

Question 2 : Creation of Date and Time Server

import java.net.*;
import java.io.*;
import java.util.*;
class DateServer
{
    public static void main(String args[]) throws Exception
    {
        ServerSocket s=new ServerSocket(5217);
        while(true)
        {
            System.out.println("Waiting For Connection ...");
            Socket soc=s.accept();
            DataOutputStream out=new DataOutputStream(soc.getOutputStream());
            out.writeBytes("Server Date: " + (new Date()).toString() + "\n");
            out.close();
            soc.close();
        }
    }
}

import java.io.*;
import java.net.*;
class DateClient
{
    public static void main(String args[]) throws Exception
    {
        Socket soc=new Socket(InetAddress.getLocalHost(),5217);        
        BufferedReader in=new BufferedReader(new InputStreamReader(soc.getInputStream()  ));
        System.out.println(in.readLine());
    }    
}

Question 3 : Printing Client address at Server side.

import java.io.IOException;
import java.net.Socket;

public class Client {
    public static void main(String[] args) throws IOException {
        Socket socket = new Socket("localhost", 1234); // connect to the server on localhost and port 1234
        System.out.println("Connected to server");    
        socket.close(); // close the socket
    }
}

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(1234); // create a server socket listening on port 1234
        System.out.println("Server started on port 1234");
        
        while (true) {
            Socket clientSocket = serverSocket.accept(); // wait for a client to connect
            String clientAddress = clientSocket.getInetAddress().getHostAddress(); // get the client's IP address
            System.out.println("Client connected from " + clientAddress);
            // do something with the client, e.g., read and write data
        }
    }
}


Question 4 : Creation of a simple Chat program.

import java.io.*;
import java.net.*

public class Server {

   private ServerSocket server;
   private int port = 5600;

   public Server() {
      try {
	server = new ServerSocket(port);
      } catch (IOException e) {
	   e.printStackTrace();
	}
   }

   public static void main(String[] args) {
	Server server = new Server();
	server.connection();
   }

   public void connection() {
	System.out.println("Waiting for client ...");
	try
	{
           Socket socket = server.accept();
	   System.out.println("Client accepted: " + socket);

	   DataInputStream dis = new DataInputStream(
		new BufferedInputStream(socket.getInputStream()));

	   boolean done = false;
	   while (!done)
	   {  
		try
		{  
	           String line = dis.readUTF();
		   System.out.println(line);
		   done = line.equals("bye");
		}
		catch(IOException ioe)
		{  
		   done = true;
		}
           }
	 	dis.close();				
		socket.close();
	   }
	   catch(IOException ioe)
	   {  
		System.out.println(ioe); 
	   }

    }
}

import java.io.*;
import java.net.*;

public class Client {
   public static void main(String[] args) {
      try {
	//
	// Create a connection to the server socket on the server application
	//
	
        InetAddress host = InetAddress.getLocalHost();
	Socket socket = new Socket(host.getHostName(), 5600);

	//
	// Send a message to the client application
	//
	DataOutputStream dos = new DataOutputStream(
            socket.getOutputStream());
	
        DataInputStream dis = new DataInputStream(System.in);

	String line = "";
	while (!line.equals("bye"))
	{  
	   try
	   {  
		line = dis.readLine();
	        dos.writeUTF(line);
		dos.flush();
	   }
	   catch(IOException ioe)
	   {  
		System.out.println("Sending error: " + ioe.getMessage());
				}
	   }
	   
           dis.close();
	   dos.close();
	} catch (UnknownHostException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
   }
}



Question 5. A Simple Program to implement FTP using TCP


import java.io.*;
import java.net.*;

class Client {
	
	public static void main(String[] args) throws Exception {
		//Initialize socket     
		Socket socket = new Socket(InetAddress.getByName("localhost"), 5000);
		byte[] contents = new byte[10000];
		//Initialize the FileOutputStream to the output file's full path.    
		FileOutputStream fos = new FileOutputStream("C:/Users/utkar/Desktop/temp1.txt");
		BufferedOutputStream bos = new BufferedOutputStream(fos);
		InputStream is = socket.getInputStream();
		//No of bytes read in one read() call         
		int bytesRead = 0;
		while ((bytesRead = is.read(contents)) != -1)
			bos.write(contents, 0, bytesRead);
		bos.flush();
		socket.close();
		System.out.println("File saved successfully!");
	}
}   

import java.io.*
import java.net.*;

class Server {
	
	public static void main(String[] args) throws Exception {         //Initialize Sockets         
		ServerSocket ssock = new ServerSocket(5000);
		Socket socket = ssock.accept();                 //The InetAddress specification  
		InetAddress IA = InetAddress.getByName("localhost");                    //Specify the file       
		File file = new File("C:/Users/utkar/Desktop/temp.txt");
		FileInputStream fis = new FileInputStream(file);
		BufferedInputStream bis = new BufferedInputStream(fis);                     //Get socket's output stream         
		OutputStream os = socket.getOutputStream();                  //Read File Contents into contents array   
		byte[] contents;
		long fileLength = file.length();
		long current = 0;
		// long start = System.nanoTime();
		while (current != fileLength) {
			int size = 10000;
			if (fileLength - current >= size)
				current += size;
			else {
				size = (int) (fileLength - current);
				current = fileLength;
			}
			contents = new byte[size];
			bis.read(contents, 0, size);
			os.write(contents);
			System.out.println("Sending file ... " + (current * 100) / fileLength + "% complete!");
		}
		os.flush();           //File transfer done. Close the socket connection!         
		socket.close();
		ssock.close();
		System.out.println("File sent succesfully!");
	}
} 

Question 6 : echo server using TCP and UDP
import java.io.*;
import java.net.*;

public class TcpEchoServer
{
    private final static int PORT = 8080;

    public static void main(String[] args) throws IOException
    {
        ServerSocket serverSocket = new ServerSocket(PORT);

        System.out.println("Listening on port " + PORT);

        while (true) {
            try (Socket socket = serverSocket.accept();
                 InputStreamReader isr = new InputStreamReader(socket.getInputStream());
                 BufferedReader in = new BufferedReader(isr);
                 PrintWriter out = new PrintWriter(socket.getOutputStream(), true)
            ) {
                System.out.println("Connection accepted");

                String line;
                while ((line = in.readLine()) != null) {
                    System.out.println("Server received: " + line + ". Sending to client");
                    out.println(line);

                    if (line.equals("Bye")) {
                        break;
                    }
                }
            }
        }
    }
}



// client

import java.io.*;
import java.net.*;

public class TcpEchoClient
{
    private final static String HOSTNAME = "localhost";
    private final static int PORT = 8080;

    public static void main(String[] args) throws IOException
    {
        try (Socket clientSocket = new Socket(HOSTNAME, PORT);
             InputStreamReader isr = new InputStreamReader(clientSocket.getInputStream());
             BufferedReader in = new BufferedReader(isr);
             PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)
        ) {
            System.out.println("Connected to " + HOSTNAME + " on port " + PORT);

            String data = "Hello\nBye";

            System.out.println("Sending to server:\n" + data);
            out.println(data);

            String line;
            while ((line = in.readLine()) != null) {
                System.out.println("Client received: " + line);
            }
        }
    }
}


Question 7 : DNS


import java.net.InetAddress;
import java.net.UnknownHostException;

public class Client {
   public static void main(String[]args) throws UnknownHostException{
        InetAddress address = InetAddress.getByName("www.microsoft.com");

        System.out.println(address.getHostAddress());
    }
}



